library {
  function {
    signature {
      name: "__inference_activation_15_layer_call_fn_6711"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_and_return_conditional_losses_3767"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_4160"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4145"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_7059"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_7044"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6455"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "conv2d_10/Conv2D/ReadVariableOp"
      control_output: "conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "conv2d_11/Conv2D/ReadVariableOp"
      control_output: "conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "conv2d_12/Conv2D/ReadVariableOp"
      control_output: "dense_5/BiasAdd/ReadVariableOp"
      control_output: "dense_5/MatMul/ReadVariableOp"
      control_output: "dense_6/BiasAdd/ReadVariableOp"
      control_output: "dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_10/Conv2D:output:0"
      input: "conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "activation_12/Relu"
      op: "Relu"
      input: "conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_10/MaxPool:output:0"
      input: "conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_11/Conv2D:output:0"
      input: "conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "activation_13/Relu"
      op: "Relu"
      input: "conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_11/MaxPool:output:0"
      input: "conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_12/Conv2D:output:0"
      input: "conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "activation_14/Relu"
      op: "Relu"
      input: "conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Const"
      }
    }
    node_def {
      name: "flatten_4/Reshape"
      op: "Reshape"
      input: "max_pooling2d_12/MaxPool:output:0"
      input: "flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Reshape"
      }
    }
    node_def {
      name: "dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/MatMul"
      op: "MatMul"
      input: "flatten_4/Reshape:output:0"
      input: "dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul"
      }
    }
    node_def {
      name: "dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/BiasAdd"
      op: "BiasAdd"
      input: "dense_5/MatMul:product:0"
      input: "dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd"
      }
    }
    node_def {
      name: "activation_15/Relu"
      op: "Relu"
      input: "dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/Relu"
      }
    }
    node_def {
      name: "dropout_6/Identity"
      op: "Identity"
      input: "activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/Identity"
      }
    }
    node_def {
      name: "dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/MatMul"
      op: "MatMul"
      input: "dropout_6/Identity:output:0"
      input: "dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul"
      }
    }
    node_def {
      name: "dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/BiasAdd"
      op: "BiasAdd"
      input: "dense_6/MatMul:product:0"
      input: "dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd"
      }
    }
    node_def {
      name: "activation_16/Sigmoid"
      op: "Sigmoid"
      input: "dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/Sigmoid:y:0"
      input: "^conv2d_10/BiasAdd/ReadVariableOp"
      input: "^conv2d_10/Conv2D/ReadVariableOp"
      input: "^conv2d_11/BiasAdd/ReadVariableOp"
      input: "^conv2d_11/Conv2D/ReadVariableOp"
      input: "^conv2d_12/BiasAdd/ReadVariableOp"
      input: "^conv2d_12/Conv2D/ReadVariableOp"
      input: "^dense_5/BiasAdd/ReadVariableOp"
      input: "^dense_5/MatMul/ReadVariableOp"
      input: "^dense_6/BiasAdd/ReadVariableOp"
      input: "^dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/BiasAdd/ReadVariableOp"
      value: "conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_10/Conv2D/ReadVariableOp"
      value: "conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/BiasAdd/ReadVariableOp"
      value: "conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/Conv2D/ReadVariableOp"
      value: "conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/BiasAdd/ReadVariableOp"
      value: "conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/Conv2D/ReadVariableOp"
      value: "conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/BiasAdd/ReadVariableOp"
      value: "dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/MatMul/ReadVariableOp"
      value: "dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/BiasAdd/ReadVariableOp"
      value: "dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/MatMul/ReadVariableOp"
      value: "dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_fn_6674"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6669"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_15_layer_call_and_return_conditional_losses_3663"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_fn_6531"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_and_return_conditional_losses_3907"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6985"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6669"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/PartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/PartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_and_return_conditional_losses_3506"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_7044"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
      control_output: "dropout_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6850"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/StatefulPartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      input: "^dropout_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    control_ret {
      key: "dropout_6/StatefulPartitionedCall"
      value: "dropout_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_fn_6639"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_fn_6383"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "inputs"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_10_layer_call_fn_3707"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_3887"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "conv2d_10/Conv2D/ReadVariableOp"
      control_output: "conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "conv2d_11/Conv2D/ReadVariableOp"
      control_output: "conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "conv2d_12/Conv2D/ReadVariableOp"
      control_output: "dense_5/BiasAdd/ReadVariableOp"
      control_output: "dense_5/MatMul/ReadVariableOp"
      control_output: "dense_6/BiasAdd/ReadVariableOp"
      control_output: "dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_10/Conv2D:output:0"
      input: "conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "activation_12/Relu"
      op: "Relu"
      input: "conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_10/MaxPool:output:0"
      input: "conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_11/Conv2D:output:0"
      input: "conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "activation_13/Relu"
      op: "Relu"
      input: "conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_11/MaxPool:output:0"
      input: "conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_12/Conv2D:output:0"
      input: "conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "activation_14/Relu"
      op: "Relu"
      input: "conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Const"
      }
    }
    node_def {
      name: "flatten_4/Reshape"
      op: "Reshape"
      input: "max_pooling2d_12/MaxPool:output:0"
      input: "flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Reshape"
      }
    }
    node_def {
      name: "dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/MatMul"
      op: "MatMul"
      input: "flatten_4/Reshape:output:0"
      input: "dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul"
      }
    }
    node_def {
      name: "dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/BiasAdd"
      op: "BiasAdd"
      input: "dense_5/MatMul:product:0"
      input: "dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd"
      }
    }
    node_def {
      name: "activation_15/Relu"
      op: "Relu"
      input: "dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/Relu"
      }
    }
    node_def {
      name: "dropout_6/dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/rate"
      }
    }
    node_def {
      name: "dropout_6/dropout/Shape"
      op: "Shape"
      input: "activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/Shape"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_6/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout_6/dropout/random_uniform/max:output:0"
      input: "dropout_6/dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout_6/dropout/random_uniform/RandomUniform:output:0"
      input: "dropout_6/dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform"
      op: "Add"
      input: "dropout_6/dropout/random_uniform/mul:z:0"
      input: "dropout_6/dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout_6/dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/sub/x"
      }
    }
    node_def {
      name: "dropout_6/dropout/sub"
      op: "Sub"
      input: "dropout_6/dropout/sub/x:output:0"
      input: "dropout_6/dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/sub"
      }
    }
    node_def {
      name: "dropout_6/dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout_6/dropout/truediv"
      op: "RealDiv"
      input: "dropout_6/dropout/truediv/x:output:0"
      input: "dropout_6/dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/truediv"
      }
    }
    node_def {
      name: "dropout_6/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_6/dropout/random_uniform:z:0"
      input: "dropout_6/dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout_6/dropout/mul"
      op: "Mul"
      input: "activation_15/Relu:activations:0"
      input: "dropout_6/dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/mul"
      }
    }
    node_def {
      name: "dropout_6/dropout/Cast"
      op: "Cast"
      input: "dropout_6/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/Cast"
      }
    }
    node_def {
      name: "dropout_6/dropout/mul_1"
      op: "Mul"
      input: "dropout_6/dropout/mul:z:0"
      input: "dropout_6/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/mul_1"
      }
    }
    node_def {
      name: "dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/MatMul"
      op: "MatMul"
      input: "dropout_6/dropout/mul_1:z:0"
      input: "dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul"
      }
    }
    node_def {
      name: "dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/BiasAdd"
      op: "BiasAdd"
      input: "dense_6/MatMul:product:0"
      input: "dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd"
      }
    }
    node_def {
      name: "activation_16/Sigmoid"
      op: "Sigmoid"
      input: "dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/Sigmoid:y:0"
      input: "^conv2d_10/BiasAdd/ReadVariableOp"
      input: "^conv2d_10/Conv2D/ReadVariableOp"
      input: "^conv2d_11/BiasAdd/ReadVariableOp"
      input: "^conv2d_11/Conv2D/ReadVariableOp"
      input: "^conv2d_12/BiasAdd/ReadVariableOp"
      input: "^conv2d_12/Conv2D/ReadVariableOp"
      input: "^dense_5/BiasAdd/ReadVariableOp"
      input: "^dense_5/MatMul/ReadVariableOp"
      input: "^dense_6/BiasAdd/ReadVariableOp"
      input: "^dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/BiasAdd/ReadVariableOp"
      value: "conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_10/Conv2D/ReadVariableOp"
      value: "conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/BiasAdd/ReadVariableOp"
      value: "conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/Conv2D/ReadVariableOp"
      value: "conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/BiasAdd/ReadVariableOp"
      value: "conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/Conv2D/ReadVariableOp"
      value: "conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/BiasAdd/ReadVariableOp"
      value: "dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/MatMul/ReadVariableOp"
      value: "dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/BiasAdd/ReadVariableOp"
      value: "dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/MatMul/ReadVariableOp"
      value: "dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_fn_3673"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_fn_6410"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_signature_wrapper_6521"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__wrapped_model_6506"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_12_layer_call_fn_3474"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6782"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "conv2d_10/Conv2D/ReadVariableOp"
      control_output: "conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "conv2d_11/Conv2D/ReadVariableOp"
      control_output: "conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "conv2d_12/Conv2D/ReadVariableOp"
      control_output: "dense_5/BiasAdd/ReadVariableOp"
      control_output: "dense_5/MatMul/ReadVariableOp"
      control_output: "dense_6/BiasAdd/ReadVariableOp"
      control_output: "dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_10/Conv2D:output:0"
      input: "conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "activation_12/Relu"
      op: "Relu"
      input: "conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_10/MaxPool:output:0"
      input: "conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_11/Conv2D:output:0"
      input: "conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "activation_13/Relu"
      op: "Relu"
      input: "conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_11/MaxPool:output:0"
      input: "conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_12/Conv2D:output:0"
      input: "conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "activation_14/Relu"
      op: "Relu"
      input: "conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Const"
      }
    }
    node_def {
      name: "flatten_4/Reshape"
      op: "Reshape"
      input: "max_pooling2d_12/MaxPool:output:0"
      input: "flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Reshape"
      }
    }
    node_def {
      name: "dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/MatMul"
      op: "MatMul"
      input: "flatten_4/Reshape:output:0"
      input: "dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul"
      }
    }
    node_def {
      name: "dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/BiasAdd"
      op: "BiasAdd"
      input: "dense_5/MatMul:product:0"
      input: "dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd"
      }
    }
    node_def {
      name: "activation_15/Relu"
      op: "Relu"
      input: "dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/Relu"
      }
    }
    node_def {
      name: "dropout_6/dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/rate"
      }
    }
    node_def {
      name: "dropout_6/dropout/Shape"
      op: "Shape"
      input: "activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/Shape"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout_6/dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout_6/dropout/random_uniform/max:output:0"
      input: "dropout_6/dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout_6/dropout/random_uniform/RandomUniform:output:0"
      input: "dropout_6/dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout_6/dropout/random_uniform"
      op: "Add"
      input: "dropout_6/dropout/random_uniform/mul:z:0"
      input: "dropout_6/dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout_6/dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/sub/x"
      }
    }
    node_def {
      name: "dropout_6/dropout/sub"
      op: "Sub"
      input: "dropout_6/dropout/sub/x:output:0"
      input: "dropout_6/dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/sub"
      }
    }
    node_def {
      name: "dropout_6/dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout_6/dropout/truediv"
      op: "RealDiv"
      input: "dropout_6/dropout/truediv/x:output:0"
      input: "dropout_6/dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/truediv"
      }
    }
    node_def {
      name: "dropout_6/dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout_6/dropout/random_uniform:z:0"
      input: "dropout_6/dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout_6/dropout/mul"
      op: "Mul"
      input: "activation_15/Relu:activations:0"
      input: "dropout_6/dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/mul"
      }
    }
    node_def {
      name: "dropout_6/dropout/Cast"
      op: "Cast"
      input: "dropout_6/dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/Cast"
      }
    }
    node_def {
      name: "dropout_6/dropout/mul_1"
      op: "Mul"
      input: "dropout_6/dropout/mul:z:0"
      input: "dropout_6/dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/dropout/mul_1"
      }
    }
    node_def {
      name: "dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/MatMul"
      op: "MatMul"
      input: "dropout_6/dropout/mul_1:z:0"
      input: "dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul"
      }
    }
    node_def {
      name: "dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/BiasAdd"
      op: "BiasAdd"
      input: "dense_6/MatMul:product:0"
      input: "dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd"
      }
    }
    node_def {
      name: "activation_16/Sigmoid"
      op: "Sigmoid"
      input: "dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/Sigmoid:y:0"
      input: "^conv2d_10/BiasAdd/ReadVariableOp"
      input: "^conv2d_10/Conv2D/ReadVariableOp"
      input: "^conv2d_11/BiasAdd/ReadVariableOp"
      input: "^conv2d_11/Conv2D/ReadVariableOp"
      input: "^conv2d_12/BiasAdd/ReadVariableOp"
      input: "^conv2d_12/Conv2D/ReadVariableOp"
      input: "^dense_5/BiasAdd/ReadVariableOp"
      input: "^dense_5/MatMul/ReadVariableOp"
      input: "^dense_6/BiasAdd/ReadVariableOp"
      input: "^dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/BiasAdd/ReadVariableOp"
      value: "conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_10/Conv2D/ReadVariableOp"
      value: "conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/BiasAdd/ReadVariableOp"
      value: "conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/Conv2D/ReadVariableOp"
      value: "conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/BiasAdd/ReadVariableOp"
      value: "conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/Conv2D/ReadVariableOp"
      value: "conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/BiasAdd/ReadVariableOp"
      value: "dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/MatMul/ReadVariableOp"
      value: "dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/BiasAdd/ReadVariableOp"
      value: "dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/MatMul/ReadVariableOp"
      value: "dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_and_return_conditional_losses_6664"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6669"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_7074"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_7044"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4145"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_4082"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/PartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/PartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_and_return_conditional_losses_6644"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3679"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "inputs"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6860"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_4082"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_15_layer_call_fn_3534"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_12_layer_call_fn_3653"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_7015"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6985"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_10_layer_call_fn_6883"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__wrapped_model_6506"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_4_conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      control_output: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      control_output: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      control_output: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/dense_5/MatMul/ReadVariableOp"
      control_output: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/Conv2D"
      op: "Conv2D"
      input: "conv2d_10_input"
      input: "sequential_4/conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_10/Conv2D:output:0"
      input: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_12/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_12/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/Conv2D"
      op: "Conv2D"
      input: "sequential_4/max_pooling2d_10/MaxPool:output:0"
      input: "sequential_4/conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_11/Conv2D:output:0"
      input: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_13/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_13/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/Conv2D"
      op: "Conv2D"
      input: "sequential_4/max_pooling2d_11/MaxPool:output:0"
      input: "sequential_4/conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_12/Conv2D:output:0"
      input: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_14/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_14/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/flatten_4/Const"
      }
    }
    node_def {
      name: "sequential_4/flatten_4/Reshape"
      op: "Reshape"
      input: "sequential_4/max_pooling2d_12/MaxPool:output:0"
      input: "sequential_4/flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/flatten_4/Reshape"
      }
    }
    node_def {
      name: "sequential_4/dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_5/MatMul"
      op: "MatMul"
      input: "sequential_4/flatten_4/Reshape:output:0"
      input: "sequential_4/dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/MatMul"
      }
    }
    node_def {
      name: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_5/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/dense_5/MatMul:product:0"
      input: "sequential_4/dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_15/Relu"
      op: "Relu"
      input: "sequential_4/dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_15/Relu"
      }
    }
    node_def {
      name: "sequential_4/dropout_6/Identity"
      op: "Identity"
      input: "sequential_4/activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dropout_6/Identity"
      }
    }
    node_def {
      name: "sequential_4/dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_6/MatMul"
      op: "MatMul"
      input: "sequential_4/dropout_6/Identity:output:0"
      input: "sequential_4/dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/MatMul"
      }
    }
    node_def {
      name: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_6/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/dense_6/MatMul:product:0"
      input: "sequential_4/dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_16/Sigmoid"
      op: "Sigmoid"
      input: "sequential_4/dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "sequential_4/activation_16/Sigmoid:y:0"
      input: "^sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      input: "^sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      input: "^sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      input: "^sequential_4/dense_5/BiasAdd/ReadVariableOp"
      input: "^sequential_4/dense_5/MatMul/ReadVariableOp"
      input: "^sequential_4/dense_6/BiasAdd/ReadVariableOp"
      input: "^sequential_4/dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      value: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_5/MatMul/ReadVariableOp"
      value: "sequential_4/dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      value: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_6/MatMul/ReadVariableOp"
      value: "sequential_4/dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_fn_6659"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_and_return_conditional_losses_3658"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_and_return_conditional_losses_3632"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6820"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/rate"
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Shape"
      }
    }
    node_def {
      name: "dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout/random_uniform/max:output:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout/random_uniform"
      op: "Add"
      input: "dropout/random_uniform/mul:z:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub/x"
      }
    }
    node_def {
      name: "dropout/sub"
      op: "Sub"
      input: "dropout/sub/x:output:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub"
      }
    }
    node_def {
      name: "dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout/truediv"
      op: "RealDiv"
      input: "dropout/truediv/x:output:0"
      input: "dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv"
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform:z:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout/mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul"
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Cast"
      }
    }
    node_def {
      name: "dropout/mul_1"
      op: "Mul"
      input: "dropout/mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dropout/mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_4175"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4145"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_fn_6722"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "inputs"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_12_layer_call_fn_6373"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_4077"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4047"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_11_layer_call_fn_4018"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_signature_wrapper_3827"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__wrapped_model_3812"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_7000"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6985"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4111"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_4082"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/PartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/PartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4013"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
      control_output: "dropout_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3927"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/StatefulPartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      input: "^dropout_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    control_ret {
      key: "dropout_6/StatefulPartitionedCall"
      value: "dropout_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_and_return_conditional_losses_6888"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_fn_3501"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_6_layer_call_and_return_conditional_losses_6541"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_and_return_conditional_losses_6830"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Sigmoid"
      op: "Sigmoid"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Sigmoid:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_fn_6691"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_restore_3622"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "assignvariableop_conv2d_10_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_1_conv2d_10_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_2_conv2d_11_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_3_conv2d_11_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_4_conv2d_12_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_5_conv2d_12_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_6_dense_5_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_7_dense_5_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_8_dense_6_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_9_dense_6_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_10_training_1_sgd_iter"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_11_training_1_sgd_decay"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_12_training_1_sgd_learning_rate"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_13_training_1_sgd_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_14_total"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_15_count"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_16_training_1_sgd_conv2d_10_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_17_training_1_sgd_conv2d_10_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_18_training_1_sgd_conv2d_11_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_19_training_1_sgd_conv2d_11_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_20_training_1_sgd_conv2d_12_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_21_training_1_sgd_conv2d_12_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_22_training_1_sgd_dense_5_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_23_training_1_sgd_dense_5_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_24_training_1_sgd_dense_6_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_25_training_1_sgd_dense_6_bias_momentum"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity_27"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "AssignVariableOp"
      control_output: "AssignVariableOp_1"
      control_output: "AssignVariableOp_10"
      control_output: "AssignVariableOp_11"
      control_output: "AssignVariableOp_12"
      control_output: "AssignVariableOp_13"
      control_output: "AssignVariableOp_14"
      control_output: "AssignVariableOp_15"
      control_output: "AssignVariableOp_16"
      control_output: "AssignVariableOp_17"
      control_output: "AssignVariableOp_18"
      control_output: "AssignVariableOp_19"
      control_output: "AssignVariableOp_2"
      control_output: "AssignVariableOp_20"
      control_output: "AssignVariableOp_21"
      control_output: "AssignVariableOp_22"
      control_output: "AssignVariableOp_23"
      control_output: "AssignVariableOp_24"
      control_output: "AssignVariableOp_25"
      control_output: "AssignVariableOp_3"
      control_output: "AssignVariableOp_4"
      control_output: "AssignVariableOp_5"
      control_output: "AssignVariableOp_6"
      control_output: "AssignVariableOp_7"
      control_output: "AssignVariableOp_8"
      control_output: "AssignVariableOp_9"
      control_output: "RestoreV2"
      control_output: "RestoreV2_1"
    }
    node_def {
      name: "RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-0/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2/tensor_names:output:0"
      input: "RestoreV2/shape_and_slices:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RestoreV2:tensors:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_conv2d_10_kernel"
      input: "Identity:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RestoreV2:tensors:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "assignvariableop_1_conv2d_10_bias"
      input: "Identity_1:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "RestoreV2:tensors:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "assignvariableop_2_conv2d_11_kernel"
      input: "Identity_2:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "RestoreV2:tensors:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "assignvariableop_3_conv2d_11_bias"
      input: "Identity_3:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "RestoreV2:tensors:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "assignvariableop_4_conv2d_12_kernel"
      input: "Identity_4:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "RestoreV2:tensors:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    node_def {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "assignvariableop_5_conv2d_12_bias"
      input: "Identity_5:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_5"
      }
    }
    node_def {
      name: "Identity_6"
      op: "Identity"
      input: "RestoreV2:tensors:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_6"
      }
    }
    node_def {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "assignvariableop_6_dense_5_kernel"
      input: "Identity_6:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_6"
      }
    }
    node_def {
      name: "Identity_7"
      op: "Identity"
      input: "RestoreV2:tensors:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_7"
      }
    }
    node_def {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "assignvariableop_7_dense_5_bias"
      input: "Identity_7:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_7"
      }
    }
    node_def {
      name: "Identity_8"
      op: "Identity"
      input: "RestoreV2:tensors:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_8"
      }
    }
    node_def {
      name: "AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "assignvariableop_8_dense_6_kernel"
      input: "Identity_8:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_8"
      }
    }
    node_def {
      name: "Identity_9"
      op: "Identity"
      input: "RestoreV2:tensors:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_9"
      }
    }
    node_def {
      name: "AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "assignvariableop_9_dense_6_bias"
      input: "Identity_9:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_9"
      }
    }
    node_def {
      name: "Identity_10"
      op: "Identity"
      input: "RestoreV2:tensors:10"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_10"
      }
    }
    node_def {
      name: "AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "assignvariableop_10_training_1_sgd_iter"
      input: "Identity_10:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_10"
      }
    }
    node_def {
      name: "Identity_11"
      op: "Identity"
      input: "RestoreV2:tensors:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_11"
      }
    }
    node_def {
      name: "AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "assignvariableop_11_training_1_sgd_decay"
      input: "Identity_11:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_11"
      }
    }
    node_def {
      name: "Identity_12"
      op: "Identity"
      input: "RestoreV2:tensors:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_12"
      }
    }
    node_def {
      name: "AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "assignvariableop_12_training_1_sgd_learning_rate"
      input: "Identity_12:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_12"
      }
    }
    node_def {
      name: "Identity_13"
      op: "Identity"
      input: "RestoreV2:tensors:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_13"
      }
    }
    node_def {
      name: "AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "assignvariableop_13_training_1_sgd_momentum"
      input: "Identity_13:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_13"
      }
    }
    node_def {
      name: "Identity_14"
      op: "Identity"
      input: "RestoreV2:tensors:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_14"
      }
    }
    node_def {
      name: "AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "assignvariableop_14_total"
      input: "Identity_14:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_14"
      }
    }
    node_def {
      name: "Identity_15"
      op: "Identity"
      input: "RestoreV2:tensors:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_15"
      }
    }
    node_def {
      name: "AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "assignvariableop_15_count"
      input: "Identity_15:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_15"
      }
    }
    node_def {
      name: "Identity_16"
      op: "Identity"
      input: "RestoreV2:tensors:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_16"
      }
    }
    node_def {
      name: "AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "assignvariableop_16_training_1_sgd_conv2d_10_kernel_momentum"
      input: "Identity_16:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_16"
      }
    }
    node_def {
      name: "Identity_17"
      op: "Identity"
      input: "RestoreV2:tensors:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_17"
      }
    }
    node_def {
      name: "AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "assignvariableop_17_training_1_sgd_conv2d_10_bias_momentum"
      input: "Identity_17:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_17"
      }
    }
    node_def {
      name: "Identity_18"
      op: "Identity"
      input: "RestoreV2:tensors:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_18"
      }
    }
    node_def {
      name: "AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "assignvariableop_18_training_1_sgd_conv2d_11_kernel_momentum"
      input: "Identity_18:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_18"
      }
    }
    node_def {
      name: "Identity_19"
      op: "Identity"
      input: "RestoreV2:tensors:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_19"
      }
    }
    node_def {
      name: "AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "assignvariableop_19_training_1_sgd_conv2d_11_bias_momentum"
      input: "Identity_19:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_19"
      }
    }
    node_def {
      name: "Identity_20"
      op: "Identity"
      input: "RestoreV2:tensors:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_20"
      }
    }
    node_def {
      name: "AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "assignvariableop_20_training_1_sgd_conv2d_12_kernel_momentum"
      input: "Identity_20:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_20"
      }
    }
    node_def {
      name: "Identity_21"
      op: "Identity"
      input: "RestoreV2:tensors:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_21"
      }
    }
    node_def {
      name: "AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "assignvariableop_21_training_1_sgd_conv2d_12_bias_momentum"
      input: "Identity_21:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_21"
      }
    }
    node_def {
      name: "Identity_22"
      op: "Identity"
      input: "RestoreV2:tensors:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_22"
      }
    }
    node_def {
      name: "AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "assignvariableop_22_training_1_sgd_dense_5_kernel_momentum"
      input: "Identity_22:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_22"
      }
    }
    node_def {
      name: "Identity_23"
      op: "Identity"
      input: "RestoreV2:tensors:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_23"
      }
    }
    node_def {
      name: "AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "assignvariableop_23_training_1_sgd_dense_5_bias_momentum"
      input: "Identity_23:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_23"
      }
    }
    node_def {
      name: "Identity_24"
      op: "Identity"
      input: "RestoreV2:tensors:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_24"
      }
    }
    node_def {
      name: "AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "assignvariableop_24_training_1_sgd_dense_6_kernel_momentum"
      input: "Identity_24:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_24"
      }
    }
    node_def {
      name: "Identity_25"
      op: "Identity"
      input: "RestoreV2:tensors:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_25"
      }
    }
    node_def {
      name: "AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "assignvariableop_25_training_1_sgd_dense_6_bias_momentum"
      input: "Identity_25:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_25"
      }
    }
    node_def {
      name: "RestoreV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2_1"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2_1/tensor_names:output:0"
      input: "RestoreV2_1/shape_and_slices:output:0"
      input: "^RestoreV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1"
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity_26"
      op: "Identity"
      input: "file_prefix"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^NoOp"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_26"
      }
    }
    node_def {
      name: "Identity_27"
      op: "Identity"
      input: "Identity_26:output:0"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^RestoreV2"
      input: "^RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_27"
      }
    }
    ret {
      key: "identity_27"
      value: "Identity_27:output:0"
    }
    control_ret {
      key: "AssignVariableOp"
      value: "AssignVariableOp"
    }
    control_ret {
      key: "AssignVariableOp_1"
      value: "AssignVariableOp_1"
    }
    control_ret {
      key: "AssignVariableOp_10"
      value: "AssignVariableOp_10"
    }
    control_ret {
      key: "AssignVariableOp_11"
      value: "AssignVariableOp_11"
    }
    control_ret {
      key: "AssignVariableOp_12"
      value: "AssignVariableOp_12"
    }
    control_ret {
      key: "AssignVariableOp_13"
      value: "AssignVariableOp_13"
    }
    control_ret {
      key: "AssignVariableOp_14"
      value: "AssignVariableOp_14"
    }
    control_ret {
      key: "AssignVariableOp_15"
      value: "AssignVariableOp_15"
    }
    control_ret {
      key: "AssignVariableOp_16"
      value: "AssignVariableOp_16"
    }
    control_ret {
      key: "AssignVariableOp_17"
      value: "AssignVariableOp_17"
    }
    control_ret {
      key: "AssignVariableOp_18"
      value: "AssignVariableOp_18"
    }
    control_ret {
      key: "AssignVariableOp_19"
      value: "AssignVariableOp_19"
    }
    control_ret {
      key: "AssignVariableOp_2"
      value: "AssignVariableOp_2"
    }
    control_ret {
      key: "AssignVariableOp_20"
      value: "AssignVariableOp_20"
    }
    control_ret {
      key: "AssignVariableOp_21"
      value: "AssignVariableOp_21"
    }
    control_ret {
      key: "AssignVariableOp_22"
      value: "AssignVariableOp_22"
    }
    control_ret {
      key: "AssignVariableOp_23"
      value: "AssignVariableOp_23"
    }
    control_ret {
      key: "AssignVariableOp_24"
      value: "AssignVariableOp_24"
    }
    control_ret {
      key: "AssignVariableOp_25"
      value: "AssignVariableOp_25"
    }
    control_ret {
      key: "AssignVariableOp_3"
      value: "AssignVariableOp_3"
    }
    control_ret {
      key: "AssignVariableOp_4"
      value: "AssignVariableOp_4"
    }
    control_ret {
      key: "AssignVariableOp_5"
      value: "AssignVariableOp_5"
    }
    control_ret {
      key: "AssignVariableOp_6"
      value: "AssignVariableOp_6"
    }
    control_ret {
      key: "AssignVariableOp_7"
      value: "AssignVariableOp_7"
    }
    control_ret {
      key: "AssignVariableOp_8"
      value: "AssignVariableOp_8"
    }
    control_ret {
      key: "AssignVariableOp_9"
      value: "AssignVariableOp_9"
    }
    control_ret {
      key: "RestoreV2"
      value: "RestoreV2"
    }
    control_ret {
      key: "RestoreV2_1"
      value: "RestoreV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_11_layer_call_fn_3524"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_10_layer_call_fn_6956"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4047"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
      control_output: "dropout_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_3702"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_3668"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_3984"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_3467"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_3529"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3927"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/StatefulPartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_3494"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      input: "^dropout_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    control_ret {
      key: "dropout_6/StatefulPartitionedCall"
      value: "dropout_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_15_layer_call_and_return_conditional_losses_6649"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_fn_3643"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_3638"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3927"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/rate"
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Shape"
      }
    }
    node_def {
      name: "dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout/random_uniform/max:output:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout/random_uniform"
      op: "Add"
      input: "dropout/random_uniform/mul:z:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub/x"
      }
    }
    node_def {
      name: "dropout/sub"
      op: "Sub"
      input: "dropout/sub/x:output:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub"
      }
    }
    node_def {
      name: "dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout/truediv"
      op: "RealDiv"
      input: "dropout/truediv/x:output:0"
      input: "dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv"
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform:z:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout/mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul"
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Cast"
      }
    }
    node_def {
      name: "dropout/mul_1"
      op: "Mul"
      input: "dropout/mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dropout/mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_12_layer_call_fn_6393"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_and_return_conditional_losses_6865"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_12_layer_call_fn_3484"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_3479"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_fn_4062"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_7"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_8"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_9"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_10"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      input: "statefulpartitionedcall_args_3"
      input: "statefulpartitionedcall_args_4"
      input: "statefulpartitionedcall_args_5"
      input: "statefulpartitionedcall_args_6"
      input: "statefulpartitionedcall_args_7"
      input: "statefulpartitionedcall_args_8"
      input: "statefulpartitionedcall_args_9"
      input: "statefulpartitionedcall_args_10"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_sequential_4_layer_call_and_return_conditional_losses_4047"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_save_6355"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "savev2_conv2d_10_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_10_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_11_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_11_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_12_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_12_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_5_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_5_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_6_1_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_6_1_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_iter_read_readvariableop"
        type: DT_INT64
      }
      input_arg {
        name: "savev2_training_2_sgd_decay_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_learning_rate_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_total_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_count_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_10_1_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_10_1_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_11_1_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_11_1_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_12_1_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_conv2d_12_1_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_dense_5_1_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_dense_5_1_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_dense_6_1_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_2_sgd_dense_6_1_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_1_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "MergeV2Checkpoints"
      control_output: "SaveV2"
      control_output: "SaveV2_1"
    }
    node_def {
      name: "StringJoin/inputs_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_3d831832b15844af8654bba034a887f3/part"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin/inputs_1"
      }
    }
    node_def {
      name: "StringJoin"
      op: "StringJoin"
      input: "file_prefix"
      input: "StringJoin/inputs_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin"
      }
    }
    node_def {
      name: "num_shards"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "num_shards"
      }
    }
    node_def {
      name: "ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename/shard"
      }
    }
    node_def {
      name: "ShardedFilename"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename"
      }
    }
    node_def {
      name: "SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-0/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/tensor_names"
      }
    }
    node_def {
      name: "SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2"
      op: "SaveV2"
      input: "ShardedFilename:filename:0"
      input: "SaveV2/tensor_names:output:0"
      input: "SaveV2/shape_and_slices:output:0"
      input: "savev2_conv2d_10_1_kernel_read_readvariableop"
      input: "savev2_conv2d_10_1_bias_read_readvariableop"
      input: "savev2_conv2d_11_1_kernel_read_readvariableop"
      input: "savev2_conv2d_11_1_bias_read_readvariableop"
      input: "savev2_conv2d_12_1_kernel_read_readvariableop"
      input: "savev2_conv2d_12_1_bias_read_readvariableop"
      input: "savev2_dense_5_1_kernel_read_readvariableop"
      input: "savev2_dense_5_1_bias_read_readvariableop"
      input: "savev2_dense_6_1_kernel_read_readvariableop"
      input: "savev2_dense_6_1_bias_read_readvariableop"
      input: "savev2_training_2_sgd_iter_read_readvariableop"
      input: "savev2_training_2_sgd_decay_read_readvariableop"
      input: "savev2_training_2_sgd_learning_rate_read_readvariableop"
      input: "savev2_training_2_sgd_momentum_read_readvariableop"
      input: "savev2_total_read_readvariableop"
      input: "savev2_count_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_10_1_kernel_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_10_1_bias_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_11_1_kernel_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_11_1_bias_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_12_1_kernel_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_conv2d_12_1_bias_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_dense_5_1_kernel_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_dense_5_1_bias_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_dense_6_1_kernel_momentum_read_readvariableop"
      input: "savev2_training_2_sgd_dense_6_1_bias_momentum_read_readvariableop"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2"
      }
    }
    node_def {
      name: "ShardedFilename_1/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename_1/shard"
      }
    }
    node_def {
      name: "ShardedFilename_1"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename_1/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename_1"
      }
    }
    node_def {
      name: "SaveV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/tensor_names"
      }
    }
    node_def {
      name: "SaveV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2_1"
      op: "SaveV2"
      input: "ShardedFilename_1:filename:0"
      input: "SaveV2_1/tensor_names:output:0"
      input: "SaveV2_1/shape_and_slices:output:0"
      input: "savev2_1_const"
      input: "^SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1"
      }
    }
    node_def {
      name: "MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "ShardedFilename:filename:0"
      input: "ShardedFilename_1:filename:0"
      input: "^SaveV2"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints/checkpoint_prefixes"
      }
    }
    node_def {
      name: "MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "MergeV2Checkpoints/checkpoint_prefixes:output:0"
      input: "file_prefix"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "file_prefix"
      input: "^MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^MergeV2Checkpoints"
      input: "^SaveV2"
      input: "^SaveV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    control_ret {
      key: "MergeV2Checkpoints"
      value: "MergeV2Checkpoints"
    }
    control_ret {
      key: "SaveV2"
      value: "SaveV2"
    }
    control_ret {
      key: "SaveV2_1"
      value: "SaveV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_and_return_conditional_losses_3762"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6850"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/rate"
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Shape"
      }
    }
    node_def {
      name: "dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout/random_uniform/max:output:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout/random_uniform"
      op: "Add"
      input: "dropout/random_uniform/mul:z:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub/x"
      }
    }
    node_def {
      name: "dropout/sub"
      op: "Sub"
      input: "dropout/sub/x:output:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub"
      }
    }
    node_def {
      name: "dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout/truediv"
      op: "RealDiv"
      input: "dropout/truediv/x:output:0"
      input: "dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv"
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform:z:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout/mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul"
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Cast"
      }
    }
    node_def {
      name: "dropout/mul_1"
      op: "Mul"
      input: "dropout/mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dropout/mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_fn_3902"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_16_layer_call_fn_3962"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_3957"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "MatMul/ReadVariableOp"
    }
    node_def {
      name: "MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "MatMul"
      op: "MatMul"
      input: "inputs"
      input: "MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "MatMul"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "MatMul:product:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "MatMul/ReadVariableOp"
      value: "MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_restore_6629"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "assignvariableop_conv2d_10_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_1_conv2d_10_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_2_conv2d_11_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_3_conv2d_11_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_4_conv2d_12_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_5_conv2d_12_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_6_dense_5_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_7_dense_5_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_8_dense_6_1_kernel"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_9_dense_6_1_bias"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_10_training_2_sgd_iter"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_11_training_2_sgd_decay"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_12_training_2_sgd_learning_rate"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_13_training_2_sgd_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_14_total"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_15_count"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_16_training_2_sgd_conv2d_10_1_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_17_training_2_sgd_conv2d_10_1_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_18_training_2_sgd_conv2d_11_1_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_19_training_2_sgd_conv2d_11_1_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_20_training_2_sgd_conv2d_12_1_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_21_training_2_sgd_conv2d_12_1_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_22_training_2_sgd_dense_5_1_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_23_training_2_sgd_dense_5_1_bias_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_24_training_2_sgd_dense_6_1_kernel_momentum"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_25_training_2_sgd_dense_6_1_bias_momentum"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity_27"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "AssignVariableOp"
      control_output: "AssignVariableOp_1"
      control_output: "AssignVariableOp_10"
      control_output: "AssignVariableOp_11"
      control_output: "AssignVariableOp_12"
      control_output: "AssignVariableOp_13"
      control_output: "AssignVariableOp_14"
      control_output: "AssignVariableOp_15"
      control_output: "AssignVariableOp_16"
      control_output: "AssignVariableOp_17"
      control_output: "AssignVariableOp_18"
      control_output: "AssignVariableOp_19"
      control_output: "AssignVariableOp_2"
      control_output: "AssignVariableOp_20"
      control_output: "AssignVariableOp_21"
      control_output: "AssignVariableOp_22"
      control_output: "AssignVariableOp_23"
      control_output: "AssignVariableOp_24"
      control_output: "AssignVariableOp_25"
      control_output: "AssignVariableOp_3"
      control_output: "AssignVariableOp_4"
      control_output: "AssignVariableOp_5"
      control_output: "AssignVariableOp_6"
      control_output: "AssignVariableOp_7"
      control_output: "AssignVariableOp_8"
      control_output: "AssignVariableOp_9"
      control_output: "RestoreV2"
      control_output: "RestoreV2_1"
    }
    node_def {
      name: "RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-0/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2/tensor_names:output:0"
      input: "RestoreV2/shape_and_slices:output:0"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RestoreV2:tensors:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_conv2d_10_1_kernel"
      input: "Identity:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RestoreV2:tensors:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    node_def {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "assignvariableop_1_conv2d_10_1_bias"
      input: "Identity_1:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_1"
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "RestoreV2:tensors:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_2"
      }
    }
    node_def {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "assignvariableop_2_conv2d_11_1_kernel"
      input: "Identity_2:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_2"
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "RestoreV2:tensors:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_3"
      }
    }
    node_def {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "assignvariableop_3_conv2d_11_1_bias"
      input: "Identity_3:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_3"
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "RestoreV2:tensors:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_4"
      }
    }
    node_def {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "assignvariableop_4_conv2d_12_1_kernel"
      input: "Identity_4:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_4"
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "RestoreV2:tensors:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_5"
      }
    }
    node_def {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "assignvariableop_5_conv2d_12_1_bias"
      input: "Identity_5:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_5"
      }
    }
    node_def {
      name: "Identity_6"
      op: "Identity"
      input: "RestoreV2:tensors:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_6"
      }
    }
    node_def {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "assignvariableop_6_dense_5_1_kernel"
      input: "Identity_6:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_6"
      }
    }
    node_def {
      name: "Identity_7"
      op: "Identity"
      input: "RestoreV2:tensors:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_7"
      }
    }
    node_def {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "assignvariableop_7_dense_5_1_bias"
      input: "Identity_7:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_7"
      }
    }
    node_def {
      name: "Identity_8"
      op: "Identity"
      input: "RestoreV2:tensors:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_8"
      }
    }
    node_def {
      name: "AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "assignvariableop_8_dense_6_1_kernel"
      input: "Identity_8:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_8"
      }
    }
    node_def {
      name: "Identity_9"
      op: "Identity"
      input: "RestoreV2:tensors:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_9"
      }
    }
    node_def {
      name: "AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "assignvariableop_9_dense_6_1_bias"
      input: "Identity_9:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_9"
      }
    }
    node_def {
      name: "Identity_10"
      op: "Identity"
      input: "RestoreV2:tensors:10"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_10"
      }
    }
    node_def {
      name: "AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "assignvariableop_10_training_2_sgd_iter"
      input: "Identity_10:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_10"
      }
    }
    node_def {
      name: "Identity_11"
      op: "Identity"
      input: "RestoreV2:tensors:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_11"
      }
    }
    node_def {
      name: "AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "assignvariableop_11_training_2_sgd_decay"
      input: "Identity_11:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_11"
      }
    }
    node_def {
      name: "Identity_12"
      op: "Identity"
      input: "RestoreV2:tensors:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_12"
      }
    }
    node_def {
      name: "AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "assignvariableop_12_training_2_sgd_learning_rate"
      input: "Identity_12:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_12"
      }
    }
    node_def {
      name: "Identity_13"
      op: "Identity"
      input: "RestoreV2:tensors:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_13"
      }
    }
    node_def {
      name: "AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "assignvariableop_13_training_2_sgd_momentum"
      input: "Identity_13:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_13"
      }
    }
    node_def {
      name: "Identity_14"
      op: "Identity"
      input: "RestoreV2:tensors:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_14"
      }
    }
    node_def {
      name: "AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "assignvariableop_14_total"
      input: "Identity_14:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_14"
      }
    }
    node_def {
      name: "Identity_15"
      op: "Identity"
      input: "RestoreV2:tensors:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_15"
      }
    }
    node_def {
      name: "AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "assignvariableop_15_count"
      input: "Identity_15:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_15"
      }
    }
    node_def {
      name: "Identity_16"
      op: "Identity"
      input: "RestoreV2:tensors:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_16"
      }
    }
    node_def {
      name: "AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "assignvariableop_16_training_2_sgd_conv2d_10_1_kernel_momentum"
      input: "Identity_16:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_16"
      }
    }
    node_def {
      name: "Identity_17"
      op: "Identity"
      input: "RestoreV2:tensors:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_17"
      }
    }
    node_def {
      name: "AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "assignvariableop_17_training_2_sgd_conv2d_10_1_bias_momentum"
      input: "Identity_17:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_17"
      }
    }
    node_def {
      name: "Identity_18"
      op: "Identity"
      input: "RestoreV2:tensors:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_18"
      }
    }
    node_def {
      name: "AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "assignvariableop_18_training_2_sgd_conv2d_11_1_kernel_momentum"
      input: "Identity_18:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_18"
      }
    }
    node_def {
      name: "Identity_19"
      op: "Identity"
      input: "RestoreV2:tensors:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_19"
      }
    }
    node_def {
      name: "AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "assignvariableop_19_training_2_sgd_conv2d_11_1_bias_momentum"
      input: "Identity_19:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_19"
      }
    }
    node_def {
      name: "Identity_20"
      op: "Identity"
      input: "RestoreV2:tensors:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_20"
      }
    }
    node_def {
      name: "AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "assignvariableop_20_training_2_sgd_conv2d_12_1_kernel_momentum"
      input: "Identity_20:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_20"
      }
    }
    node_def {
      name: "Identity_21"
      op: "Identity"
      input: "RestoreV2:tensors:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_21"
      }
    }
    node_def {
      name: "AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "assignvariableop_21_training_2_sgd_conv2d_12_1_bias_momentum"
      input: "Identity_21:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_21"
      }
    }
    node_def {
      name: "Identity_22"
      op: "Identity"
      input: "RestoreV2:tensors:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_22"
      }
    }
    node_def {
      name: "AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "assignvariableop_22_training_2_sgd_dense_5_1_kernel_momentum"
      input: "Identity_22:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_22"
      }
    }
    node_def {
      name: "Identity_23"
      op: "Identity"
      input: "RestoreV2:tensors:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_23"
      }
    }
    node_def {
      name: "AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "assignvariableop_23_training_2_sgd_dense_5_1_bias_momentum"
      input: "Identity_23:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_23"
      }
    }
    node_def {
      name: "Identity_24"
      op: "Identity"
      input: "RestoreV2:tensors:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_24"
      }
    }
    node_def {
      name: "AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "assignvariableop_24_training_2_sgd_dense_6_1_kernel_momentum"
      input: "Identity_24:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_24"
      }
    }
    node_def {
      name: "Identity_25"
      op: "Identity"
      input: "RestoreV2:tensors:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_25"
      }
    }
    node_def {
      name: "AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "assignvariableop_25_training_2_sgd_dense_6_1_bias_momentum"
      input: "Identity_25:output:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp_25"
      }
    }
    node_def {
      name: "RestoreV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/tensor_names"
      }
    }
    node_def {
      name: "RestoreV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "RestoreV2_1"
      op: "RestoreV2"
      input: "file_prefix"
      input: "RestoreV2_1/tensor_names:output:0"
      input: "RestoreV2_1/shape_and_slices:output:0"
      input: "^RestoreV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RestoreV2_1"
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity_26"
      op: "Identity"
      input: "file_prefix"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^NoOp"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_26"
      }
    }
    node_def {
      name: "Identity_27"
      op: "Identity"
      input: "Identity_26:output:0"
      input: "^AssignVariableOp"
      input: "^AssignVariableOp_1"
      input: "^AssignVariableOp_10"
      input: "^AssignVariableOp_11"
      input: "^AssignVariableOp_12"
      input: "^AssignVariableOp_13"
      input: "^AssignVariableOp_14"
      input: "^AssignVariableOp_15"
      input: "^AssignVariableOp_16"
      input: "^AssignVariableOp_17"
      input: "^AssignVariableOp_18"
      input: "^AssignVariableOp_19"
      input: "^AssignVariableOp_2"
      input: "^AssignVariableOp_20"
      input: "^AssignVariableOp_21"
      input: "^AssignVariableOp_22"
      input: "^AssignVariableOp_23"
      input: "^AssignVariableOp_24"
      input: "^AssignVariableOp_25"
      input: "^AssignVariableOp_3"
      input: "^AssignVariableOp_4"
      input: "^AssignVariableOp_5"
      input: "^AssignVariableOp_6"
      input: "^AssignVariableOp_7"
      input: "^AssignVariableOp_8"
      input: "^AssignVariableOp_9"
      input: "^RestoreV2"
      input: "^RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_27"
      }
    }
    ret {
      key: "identity_27"
      value: "Identity_27:output:0"
    }
    control_ret {
      key: "AssignVariableOp"
      value: "AssignVariableOp"
    }
    control_ret {
      key: "AssignVariableOp_1"
      value: "AssignVariableOp_1"
    }
    control_ret {
      key: "AssignVariableOp_10"
      value: "AssignVariableOp_10"
    }
    control_ret {
      key: "AssignVariableOp_11"
      value: "AssignVariableOp_11"
    }
    control_ret {
      key: "AssignVariableOp_12"
      value: "AssignVariableOp_12"
    }
    control_ret {
      key: "AssignVariableOp_13"
      value: "AssignVariableOp_13"
    }
    control_ret {
      key: "AssignVariableOp_14"
      value: "AssignVariableOp_14"
    }
    control_ret {
      key: "AssignVariableOp_15"
      value: "AssignVariableOp_15"
    }
    control_ret {
      key: "AssignVariableOp_16"
      value: "AssignVariableOp_16"
    }
    control_ret {
      key: "AssignVariableOp_17"
      value: "AssignVariableOp_17"
    }
    control_ret {
      key: "AssignVariableOp_18"
      value: "AssignVariableOp_18"
    }
    control_ret {
      key: "AssignVariableOp_19"
      value: "AssignVariableOp_19"
    }
    control_ret {
      key: "AssignVariableOp_2"
      value: "AssignVariableOp_2"
    }
    control_ret {
      key: "AssignVariableOp_20"
      value: "AssignVariableOp_20"
    }
    control_ret {
      key: "AssignVariableOp_21"
      value: "AssignVariableOp_21"
    }
    control_ret {
      key: "AssignVariableOp_22"
      value: "AssignVariableOp_22"
    }
    control_ret {
      key: "AssignVariableOp_23"
      value: "AssignVariableOp_23"
    }
    control_ret {
      key: "AssignVariableOp_24"
      value: "AssignVariableOp_24"
    }
    control_ret {
      key: "AssignVariableOp_25"
      value: "AssignVariableOp_25"
    }
    control_ret {
      key: "AssignVariableOp_3"
      value: "AssignVariableOp_3"
    }
    control_ret {
      key: "AssignVariableOp_4"
      value: "AssignVariableOp_4"
    }
    control_ret {
      key: "AssignVariableOp_5"
      value: "AssignVariableOp_5"
    }
    control_ret {
      key: "AssignVariableOp_6"
      value: "AssignVariableOp_6"
    }
    control_ret {
      key: "AssignVariableOp_7"
      value: "AssignVariableOp_7"
    }
    control_ret {
      key: "AssignVariableOp_8"
      value: "AssignVariableOp_8"
    }
    control_ret {
      key: "AssignVariableOp_9"
      value: "AssignVariableOp_9"
    }
    control_ret {
      key: "RestoreV2"
      value: "RestoreV2"
    }
    control_ret {
      key: "RestoreV2_1"
      value: "RestoreV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6461"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "inputs"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_3752"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "conv2d_10/Conv2D/ReadVariableOp"
      control_output: "conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "conv2d_11/Conv2D/ReadVariableOp"
      control_output: "conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "conv2d_12/Conv2D/ReadVariableOp"
      control_output: "dense_5/BiasAdd/ReadVariableOp"
      control_output: "dense_5/MatMul/ReadVariableOp"
      control_output: "dense_6/BiasAdd/ReadVariableOp"
      control_output: "dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_10/Conv2D:output:0"
      input: "conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "activation_12/Relu"
      op: "Relu"
      input: "conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_10/MaxPool:output:0"
      input: "conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_11/Conv2D:output:0"
      input: "conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "activation_13/Relu"
      op: "Relu"
      input: "conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/Conv2D"
      op: "Conv2D"
      input: "max_pooling2d_11/MaxPool:output:0"
      input: "conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "conv2d_12/Conv2D:output:0"
      input: "conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "activation_14/Relu"
      op: "Relu"
      input: "conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/Relu"
      }
    }
    node_def {
      name: "max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Const"
      }
    }
    node_def {
      name: "flatten_4/Reshape"
      op: "Reshape"
      input: "max_pooling2d_12/MaxPool:output:0"
      input: "flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/Reshape"
      }
    }
    node_def {
      name: "dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/MatMul"
      op: "MatMul"
      input: "flatten_4/Reshape:output:0"
      input: "dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/MatMul"
      }
    }
    node_def {
      name: "dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_5/BiasAdd"
      op: "BiasAdd"
      input: "dense_5/MatMul:product:0"
      input: "dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/BiasAdd"
      }
    }
    node_def {
      name: "activation_15/Relu"
      op: "Relu"
      input: "dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/Relu"
      }
    }
    node_def {
      name: "dropout_6/Identity"
      op: "Identity"
      input: "activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/Identity"
      }
    }
    node_def {
      name: "dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/MatMul"
      op: "MatMul"
      input: "dropout_6/Identity:output:0"
      input: "dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/MatMul"
      }
    }
    node_def {
      name: "dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "dense_6/BiasAdd"
      op: "BiasAdd"
      input: "dense_6/MatMul:product:0"
      input: "dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/BiasAdd"
      }
    }
    node_def {
      name: "activation_16/Sigmoid"
      op: "Sigmoid"
      input: "dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/Sigmoid:y:0"
      input: "^conv2d_10/BiasAdd/ReadVariableOp"
      input: "^conv2d_10/Conv2D/ReadVariableOp"
      input: "^conv2d_11/BiasAdd/ReadVariableOp"
      input: "^conv2d_11/Conv2D/ReadVariableOp"
      input: "^conv2d_12/BiasAdd/ReadVariableOp"
      input: "^conv2d_12/Conv2D/ReadVariableOp"
      input: "^dense_5/BiasAdd/ReadVariableOp"
      input: "^dense_5/MatMul/ReadVariableOp"
      input: "^dense_6/BiasAdd/ReadVariableOp"
      input: "^dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/BiasAdd/ReadVariableOp"
      value: "conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_10/Conv2D/ReadVariableOp"
      value: "conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/BiasAdd/ReadVariableOp"
      value: "conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_11/Conv2D/ReadVariableOp"
      value: "conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/BiasAdd/ReadVariableOp"
      value: "conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "conv2d_12/Conv2D/ReadVariableOp"
      value: "conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/BiasAdd/ReadVariableOp"
      value: "dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_5/MatMul/ReadVariableOp"
      value: "dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/BiasAdd/ReadVariableOp"
      value: "dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "dense_6/MatMul/ReadVariableOp"
      value: "dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_fn_6855"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6850"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__traced_save_3456"
      input_arg {
        name: "file_prefix"
        type: DT_STRING
      }
      input_arg {
        name: "savev2_conv2d_10_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_10_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_11_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_11_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_12_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_conv2d_12_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_5_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_5_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_6_kernel_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_dense_6_bias_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_iter_read_readvariableop"
        type: DT_INT64
      }
      input_arg {
        name: "savev2_training_1_sgd_decay_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_learning_rate_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_total_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_count_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_10_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_10_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_11_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_11_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_12_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_conv2d_12_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_dense_5_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_dense_5_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_dense_6_kernel_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_training_1_sgd_dense_6_bias_momentum_read_readvariableop"
        type: DT_FLOAT
      }
      input_arg {
        name: "savev2_1_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "MergeV2Checkpoints"
      control_output: "SaveV2"
      control_output: "SaveV2_1"
    }
    node_def {
      name: "StringJoin/inputs_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_d966df206e7d4d85bf279da65d8b8b51/part"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin/inputs_1"
      }
    }
    node_def {
      name: "StringJoin"
      op: "StringJoin"
      input: "file_prefix"
      input: "StringJoin/inputs_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
      experimental_debug_info {
        original_node_names: "StringJoin"
      }
    }
    node_def {
      name: "num_shards"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "num_shards"
      }
    }
    node_def {
      name: "ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename/shard"
      }
    }
    node_def {
      name: "ShardedFilename"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename"
      }
    }
    node_def {
      name: "SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "layer_with_weights-0/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/iter/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/decay/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/learning_rate/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/total/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "keras_api/metrics/0/count/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-0/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-1/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-2/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-3/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/kernel/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
            string_val: "layer_with_weights-4/bias/.OPTIMIZER_SLOT/optimizer/momentum/.ATTRIBUTES/VARIABLE_VALUE"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/tensor_names"
      }
    }
    node_def {
      name: "SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2"
      op: "SaveV2"
      input: "ShardedFilename:filename:0"
      input: "SaveV2/tensor_names:output:0"
      input: "SaveV2/shape_and_slices:output:0"
      input: "savev2_conv2d_10_kernel_read_readvariableop"
      input: "savev2_conv2d_10_bias_read_readvariableop"
      input: "savev2_conv2d_11_kernel_read_readvariableop"
      input: "savev2_conv2d_11_bias_read_readvariableop"
      input: "savev2_conv2d_12_kernel_read_readvariableop"
      input: "savev2_conv2d_12_bias_read_readvariableop"
      input: "savev2_dense_5_kernel_read_readvariableop"
      input: "savev2_dense_5_bias_read_readvariableop"
      input: "savev2_dense_6_kernel_read_readvariableop"
      input: "savev2_dense_6_bias_read_readvariableop"
      input: "savev2_training_1_sgd_iter_read_readvariableop"
      input: "savev2_training_1_sgd_decay_read_readvariableop"
      input: "savev2_training_1_sgd_learning_rate_read_readvariableop"
      input: "savev2_training_1_sgd_momentum_read_readvariableop"
      input: "savev2_total_read_readvariableop"
      input: "savev2_count_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_10_kernel_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_10_bias_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_11_kernel_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_11_bias_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_12_kernel_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_conv2d_12_bias_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_dense_5_kernel_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_dense_5_bias_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_dense_6_kernel_momentum_read_readvariableop"
      input: "savev2_training_1_sgd_dense_6_bias_momentum_read_readvariableop"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2"
      }
    }
    node_def {
      name: "ShardedFilename_1/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ShardedFilename_1/shard"
      }
    }
    node_def {
      name: "ShardedFilename_1"
      op: "ShardedFilename"
      input: "StringJoin:output:0"
      input: "ShardedFilename_1/shard:output:0"
      input: "num_shards:output:0"
      device: "/device:CPU:0"
      experimental_debug_info {
        original_node_names: "ShardedFilename_1"
      }
    }
    node_def {
      name: "SaveV2_1/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/tensor_names"
      }
    }
    node_def {
      name: "SaveV2_1/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1/shape_and_slices"
      }
    }
    node_def {
      name: "SaveV2_1"
      op: "SaveV2"
      input: "ShardedFilename_1:filename:0"
      input: "SaveV2_1/tensor_names:output:0"
      input: "SaveV2_1/shape_and_slices:output:0"
      input: "savev2_1_const"
      input: "^SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "SaveV2_1"
      }
    }
    node_def {
      name: "MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "ShardedFilename:filename:0"
      input: "ShardedFilename_1:filename:0"
      input: "^SaveV2"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints/checkpoint_prefixes"
      }
    }
    node_def {
      name: "MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "MergeV2Checkpoints/checkpoint_prefixes:output:0"
      input: "file_prefix"
      input: "^SaveV2_1"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "MergeV2Checkpoints"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "file_prefix"
      input: "^MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^MergeV2Checkpoints"
      input: "^SaveV2"
      input: "^SaveV2_1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    control_ret {
      key: "MergeV2Checkpoints"
      value: "MergeV2Checkpoints"
    }
    control_ret {
      key: "SaveV2"
      value: "SaveV2"
    }
    control_ret {
      key: "SaveV2_1"
      value: "SaveV2_1"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "file_prefix"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_fn_4116"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_4082"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_11_layer_call_fn_6701"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "PartitionedCall"
      op: "PartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "PartitionedCall:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6951"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
      control_output: "dropout_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6850"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/StatefulPartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      input: "^dropout_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    control_ret {
      key: "dropout_6/StatefulPartitionedCall"
      value: "dropout_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_3648"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "MaxPool"
      op: "MaxPool"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MaxPool"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MaxPool:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_activation_14_layer_call_and_return_conditional_losses_3897"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Relu"
      op: "Relu"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Relu"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dense_5_layer_call_fn_3979"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_3972"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3892"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_10_layer_call_fn_3697"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_3690"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_fn_3932"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3927"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "BiasAdd/ReadVariableOp"
      control_output: "Conv2D/ReadVariableOp"
    }
    node_def {
      name: "dilation_rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dilation_rate"
      }
    }
    node_def {
      name: "Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "Conv2D"
      op: "Conv2D"
      input: "inputs"
      input: "Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "Conv2D"
      }
    }
    node_def {
      name: "BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "BiasAdd"
      op: "BiasAdd"
      input: "Conv2D:output:0"
      input: "BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "BiasAdd"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "BiasAdd:output:0"
      input: "^BiasAdd/ReadVariableOp"
      input: "^Conv2D/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "BiasAdd/ReadVariableOp"
      value: "BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "Conv2D/ReadVariableOp"
      value: "Conv2D/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_conv2d_11_layer_call_fn_6800"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      input_arg {
        name: "statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "StatefulPartitionedCall"
    }
    node_def {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "inputs"
      input: "statefulpartitionedcall_args_1"
      input: "statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "StatefulPartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "StatefulPartitionedCall:output:0"
      input: "^StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "StatefulPartitionedCall"
      value: "StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_dropout_6_layer_call_and_return_conditional_losses_3952"
      input_arg {
        name: "inputs"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "dropout/rate"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/rate"
      }
    }
    node_def {
      name: "dropout/Shape"
      op: "Shape"
      input: "inputs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Shape"
      }
    }
    node_def {
      name: "dropout/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/min"
      }
    }
    node_def {
      name: "dropout/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/max"
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/RandomUniform"
      }
    }
    node_def {
      name: "dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout/random_uniform/max:output:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/sub"
      }
    }
    node_def {
      name: "dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform/mul"
      }
    }
    node_def {
      name: "dropout/random_uniform"
      op: "Add"
      input: "dropout/random_uniform/mul:z:0"
      input: "dropout/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/random_uniform"
      }
    }
    node_def {
      name: "dropout/sub/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub/x"
      }
    }
    node_def {
      name: "dropout/sub"
      op: "Sub"
      input: "dropout/sub/x:output:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/sub"
      }
    }
    node_def {
      name: "dropout/truediv/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv/x"
      }
    }
    node_def {
      name: "dropout/truediv"
      op: "RealDiv"
      input: "dropout/truediv/x:output:0"
      input: "dropout/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/truediv"
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform:z:0"
      input: "dropout/rate:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/GreaterEqual"
      }
    }
    node_def {
      name: "dropout/mul"
      op: "Mul"
      input: "inputs"
      input: "dropout/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul"
      }
    }
    node_def {
      name: "dropout/Cast"
      op: "Cast"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/Cast"
      }
    }
    node_def {
      name: "dropout/mul_1"
      op: "Mul"
      input: "dropout/mul:z:0"
      input: "dropout/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "dropout/mul_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "dropout/mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "inputs"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_sequential_4_layer_call_and_return_conditional_losses_6922"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_10_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_11_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "conv2d_12_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_5_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "dense_6_statefulpartitionedcall_args_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "conv2d_10/StatefulPartitionedCall"
      control_output: "conv2d_11/StatefulPartitionedCall"
      control_output: "conv2d_12/StatefulPartitionedCall"
      control_output: "dense_5/StatefulPartitionedCall"
      control_output: "dense_6/StatefulPartitionedCall"
    }
    node_def {
      name: "conv2d_10/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "conv2d_10_input"
      input: "conv2d_10_statefulpartitionedcall_args_1"
      input: "conv2d_10_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_10_layer_call_and_return_conditional_losses_6876"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_10/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_12/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_10/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_12_layer_call_and_return_conditional_losses_6634"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_12/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_10/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_10_layer_call_and_return_conditional_losses_6893"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_10/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_11/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_10/PartitionedCall:output:0"
      input: "conv2d_11_statefulpartitionedcall_args_1"
      input: "conv2d_11_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_11_layer_call_and_return_conditional_losses_6793"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_11/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_13/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_11/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_13_layer_call_and_return_conditional_losses_6378"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_13/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_11/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_13/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_11_layer_call_and_return_conditional_losses_6696"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_11/PartitionedCall"
      }
    }
    node_def {
      name: "conv2d_12/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "max_pooling2d_11/PartitionedCall:output:0"
      input: "conv2d_12_statefulpartitionedcall_args_1"
      input: "conv2d_12_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_conv2d_12_layer_call_and_return_conditional_losses_6366"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conv2d_12/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_14/PartitionedCall"
      op: "PartitionedCall"
      input: "conv2d_12/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_14_layer_call_and_return_conditional_losses_6526"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_14/PartitionedCall"
      }
    }
    node_def {
      name: "max_pooling2d_12/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_14/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_max_pooling2d_12_layer_call_and_return_conditional_losses_6388"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "max_pooling2d_12/PartitionedCall"
      }
    }
    node_def {
      name: "flatten_4/PartitionedCall"
      op: "PartitionedCall"
      input: "max_pooling2d_12/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_flatten_4_layer_call_and_return_conditional_losses_6717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flatten_4/PartitionedCall"
      }
    }
    node_def {
      name: "dense_5/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "flatten_4/PartitionedCall:output:0"
      input: "dense_5_statefulpartitionedcall_args_1"
      input: "dense_5_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_5_layer_call_and_return_conditional_losses_6684"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_5/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_15/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_5/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_15_layer_call_and_return_conditional_losses_6706"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_15/PartitionedCall"
      }
    }
    node_def {
      name: "dropout_6/PartitionedCall"
      op: "PartitionedCall"
      input: "activation_15/PartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dropout_6_layer_call_and_return_conditional_losses_6669"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dropout_6/PartitionedCall"
      }
    }
    node_def {
      name: "dense_6/StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "dropout_6/PartitionedCall:output:0"
      input: "dense_6_statefulpartitionedcall_args_1"
      input: "dense_6_statefulpartitionedcall_args_2"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_dense_6_layer_call_and_return_conditional_losses_6403"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "dense_6/StatefulPartitionedCall"
      }
    }
    node_def {
      name: "activation_16/PartitionedCall"
      op: "PartitionedCall"
      input: "dense_6/StatefulPartitionedCall:output:0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_gradient_op_type"
        value {
          s: "PartitionedCallUnused"
        }
      }
      attr {
        key: "config"
        value {
          s: ""
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "executor_type"
        value {
          s: ""
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_activation_16_layer_call_and_return_conditional_losses_6654"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "activation_16/PartitionedCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "activation_16/PartitionedCall:output:0"
      input: "^conv2d_10/StatefulPartitionedCall"
      input: "^conv2d_11/StatefulPartitionedCall"
      input: "^conv2d_12/StatefulPartitionedCall"
      input: "^dense_5/StatefulPartitionedCall"
      input: "^dense_6/StatefulPartitionedCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "conv2d_10/StatefulPartitionedCall"
      value: "conv2d_10/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_11/StatefulPartitionedCall"
      value: "conv2d_11/StatefulPartitionedCall"
    }
    control_ret {
      key: "conv2d_12/StatefulPartitionedCall"
      value: "conv2d_12/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_5/StatefulPartitionedCall"
      value: "dense_5/StatefulPartitionedCall"
    }
    control_ret {
      key: "dense_6/StatefulPartitionedCall"
      value: "dense_6/StatefulPartitionedCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__wrapped_model_3812"
      input_arg {
        name: "conv2d_10_input"
        type: DT_FLOAT
      }
      input_arg {
        name: "sequential_4_conv2d_10_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_10_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_11_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_11_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_12_conv2d_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_conv2d_12_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_5_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_5_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_6_matmul_readvariableop_resource"
        type: DT_RESOURCE
      }
      input_arg {
        name: "sequential_4_dense_6_biasadd_readvariableop_resource"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      control_output: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      control_output: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      control_output: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/dense_5/MatMul/ReadVariableOp"
      control_output: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      control_output: "sequential_4/dense_6/MatMul/ReadVariableOp"
    }
    node_def {
      name: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_10_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/Conv2D"
      op: "Conv2D"
      input: "conv2d_10_input"
      input: "sequential_4/conv2d_10/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_10_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_10/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_10/Conv2D:output:0"
      input: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_10/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_12/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_10/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_12/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_10/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_12/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_10/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_11_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/Conv2D"
      op: "Conv2D"
      input: "sequential_4/max_pooling2d_10/MaxPool:output:0"
      input: "sequential_4/conv2d_11/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_11_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_11/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_11/Conv2D:output:0"
      input: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_11/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_13/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_11/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_13/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_11/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_13/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_11/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_12_conv2d_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/Conv2D"
      op: "Conv2D"
      input: "sequential_4/max_pooling2d_11/MaxPool:output:0"
      input: "sequential_4/conv2d_12/Conv2D/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "dilations"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "explicit_paddings"
        value {
          list {
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 1
            i: 1
            i: 1
          }
        }
      }
      attr {
        key: "use_cudnn_on_gpu"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/Conv2D"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_conv2d_12_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/conv2d_12/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/conv2d_12/Conv2D:output:0"
      input: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/conv2d_12/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_14/Relu"
      op: "Relu"
      input: "sequential_4/conv2d_12/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_14/Relu"
      }
    }
    node_def {
      name: "sequential_4/max_pooling2d_12/MaxPool"
      op: "MaxPool"
      input: "sequential_4/activation_14/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "ksize"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      attr {
        key: "padding"
        value {
          s: "VALID"
        }
      }
      attr {
        key: "strides"
        value {
          list {
            i: 1
            i: 2
            i: 2
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/max_pooling2d_12/MaxPool"
      }
    }
    node_def {
      name: "sequential_4/flatten_4/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377@*\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/flatten_4/Const"
      }
    }
    node_def {
      name: "sequential_4/flatten_4/Reshape"
      op: "Reshape"
      input: "sequential_4/max_pooling2d_12/MaxPool:output:0"
      input: "sequential_4/flatten_4/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/flatten_4/Reshape"
      }
    }
    node_def {
      name: "sequential_4/dense_5/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_5_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_5/MatMul"
      op: "MatMul"
      input: "sequential_4/flatten_4/Reshape:output:0"
      input: "sequential_4/dense_5/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/MatMul"
      }
    }
    node_def {
      name: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_5_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_5/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/dense_5/MatMul:product:0"
      input: "sequential_4/dense_5/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_5/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_15/Relu"
      op: "Relu"
      input: "sequential_4/dense_5/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_15/Relu"
      }
    }
    node_def {
      name: "sequential_4/dropout_6/Identity"
      op: "Identity"
      input: "sequential_4/activation_15/Relu:activations:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dropout_6/Identity"
      }
    }
    node_def {
      name: "sequential_4/dense_6/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_6_matmul_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/MatMul/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_6/MatMul"
      op: "MatMul"
      input: "sequential_4/dropout_6/Identity:output:0"
      input: "sequential_4/dense_6/MatMul/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/MatMul"
      }
    }
    node_def {
      name: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "sequential_4_dense_6_biasadd_readvariableop_resource"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      }
    }
    node_def {
      name: "sequential_4/dense_6/BiasAdd"
      op: "BiasAdd"
      input: "sequential_4/dense_6/MatMul:product:0"
      input: "sequential_4/dense_6/BiasAdd/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/dense_6/BiasAdd"
      }
    }
    node_def {
      name: "sequential_4/activation_16/Sigmoid"
      op: "Sigmoid"
      input: "sequential_4/dense_6/BiasAdd:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "sequential_4/activation_16/Sigmoid"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "sequential_4/activation_16/Sigmoid:y:0"
      input: "^sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      input: "^sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      input: "^sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      input: "^sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      input: "^sequential_4/dense_5/BiasAdd/ReadVariableOp"
      input: "^sequential_4/dense_5/MatMul/ReadVariableOp"
      input: "^sequential_4/dense_6/BiasAdd/ReadVariableOp"
      input: "^sequential_4/dense_6/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    control_ret {
      key: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_10/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_10/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_11/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_11/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
      value: "sequential_4/conv2d_12/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
      value: "sequential_4/conv2d_12/Conv2D/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
      value: "sequential_4/dense_5/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_5/MatMul/ReadVariableOp"
      value: "sequential_4/dense_5/MatMul/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
      value: "sequential_4/dense_6/BiasAdd/ReadVariableOp"
    }
    control_ret {
      key: "sequential_4/dense_6/MatMul/ReadVariableOp"
      value: "sequential_4/dense_6/MatMul/ReadVariableOp"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "conv2d_10_input"
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
